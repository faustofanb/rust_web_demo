openapi: 3.0.3
info:
  title: Rust Web Demo API
  description: API documentation for the Rust Web Demo application, a proof-of-concept for migrating from Spring Boot to Rust.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Development server
tags:
  - name: Health
    description: API endpoints for health and readiness checks.
  - name: Authentication
    description: API endpoints for user authentication.
  - name: Users
    description: API endpoints for user management.
paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Checks if the application is running.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'
  /ready:
    get:
      tags:
        - Health
      summary: Readiness check
      description: Checks if the application is ready to serve traffic, including database connectivity.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadinessStatus'
  /api/auth/register:
    post:
      tags:
        - Authentication
      summary: User registration
      description: Registers a new user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Bad request (e.g., invalid input)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticates a user and returns a JWT.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Unauthorized (e.g., invalid credentials)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/auth/me:
    get:
      tags:
        - Authentication
      summary: Get current user information
      description: Returns the information for the currently authenticated user.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (e.g., invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /api/users:
    get:
      tags:
        - Users
      summary: Get user list
      description: Returns a list of all users. Requires authentication.
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized (e.g., invalid or missing token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    HealthStatus:
      type: object
      properties:
        status:
          type: string
          example: ok
    ReadinessStatus:
      type: object
      properties:
        status:
          type: string
          example: ok
        database:
          type: string
          example: connected
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        username:
          type: string
          example: testuser
        email:
          type: string
          format: email
          example: test@example.com
    RegisterRequest:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          example: testuser
        email:
          type: string
          format: email
          example: test@example.com
        password:
          type: string
          format: password
          example: password123
    LoginRequest:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          example: testuser
        password:
          type: string
          format: password
          example: password123
    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
    ErrorResponse:
      type: object
      properties:
        error:
          type: string
          example: An error occurred
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

