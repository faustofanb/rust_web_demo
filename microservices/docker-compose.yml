version: '3.8'

services:
  # 基础设施服务
  consul:
    image: consul:latest
    container_name: consul
    hostname: consul
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "8500:8500"
    command: consul agent -server -bootstrap-expect=1 -data-dir=/tmp/consul -ui -client=0.0.0.0
    networks:
      - microservices_net

  mysql:
    image: mysql:8.0
    container_name: mysql
    hostname: mysql
    environment:
      - MYSQL_ROOT_PASSWORD=123456
      - TZ=Asia/Shanghai
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./mysql/init:/docker-entrypoint-initdb.d
    command:
      - "--character-set-server=utf8mb4"
      - "--collation-server=utf8mb4_general_ci"
      - "--explicit_defaults_for_timestamp=true"
      - "--lower_case_table_names=1"
    networks:
      - microservices_net

  redis:
    image: redis:7-alpine
    container_name: redis
    hostname: redis
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - microservices_net

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    hostname: jaeger
    environment:
      - TZ=Asia/Shanghai
    ports:
      - "16686:16686"
      - "14268:14268"
    networks:
      - microservices_net

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    hostname: kafka
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    ports:
      - "9092:9092"
    depends_on:
      - zookeeper
    networks:
      - microservices_net

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - microservices_net

  # Rust微服务
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway
    hostname: gateway
    environment:
      - SERVICE_NAME=gateway
      - SERVICE_VERSION=1.0.0
      - SERVICE_PORT=8080
      - CONSUL_URL=http://consul:8500
      - CONSUL_DATACENTER=dc1
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8080
      - RUST_LOG=gateway=debug,tower_http=debug
    ports:
      - "8080:8080"
    depends_on:
      - consul
    networks:
      - microservices_net
    restart: unless-stopped

  user-service:
    build:
      context: ./user-service
      dockerfile: Dockerfile
    container_name: user-service
    hostname: user-service
    environment:
      - SERVICE_NAME=user-service
      - SERVICE_VERSION=1.0.0
      - SERVICE_PORT=8081
      - CONSUL_URL=http://consul:8500
      - CONSUL_DATACENTER=dc1
      - DATABASE_URL=mysql://root:123456@mysql:3306/users
      - DATABASE_MAX_CONNECTIONS=10
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8081
      - RUST_LOG=user_service=debug,tower_http=debug
    ports:
      - "8081:8081"
    depends_on:
      - consul
      - mysql
    networks:
      - microservices_net
    restart: unless-stopped

  # 监控服务
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    hostname: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - microservices_net

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    hostname: grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - microservices_net

networks:
  microservices_net:
    driver: bridge

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
